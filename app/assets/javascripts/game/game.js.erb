(function () {
	if (typeof Asteroids === "undefined") {
		window.Asteroids = {};
	}

	var Game = Asteroids.Game = function () {
		this.consoleView = new Asteroids.ConsoleView({ game: this });
		this.ship = new Asteroids.Ship({ game: this });
		this.planets = [];
		this.asteroids = [];
		this.bullets = [];
		this.leftEye = new Asteroids.Eye({ pos: [625, 365], radius: 40, watched: this.ship })
		this.rightEye = new Asteroids.Eye({ pos: [785, 380], radius: 40, watched: this.ship })
		this.level = 1;
		this.kills = 0;
		this.lives = 3;
		this.score = 0;
		this.levelSound = new Audio();
		this.levelSound.src = "<%= asset_path('level-up.mp3') %>";
		this.jabSound = new Audio();
		this.jabSound.src = "<%= asset_path('jab.mp3') %>";
		this.isOver = false;
		this.addAsteroids();
		this.dim_x = 1000;
		this.dim_y = 700;
		$SCORE = 0;
	};

	Game.DIM_X = 1000;
	Game.DIM_Y = 700;
	Game.NUM_ASTEROIDS = 5;

	Game.prototype.addAsteroids = function () {
		for (var i = 0; i < Game.NUM_ASTEROIDS + this.level; i++) {
			this.asteroids.push(new Asteroids.Asteroid( { game: this }));
		}
	};

	Game.prototype.allObjects = function () {
		return this.planets.concat(this.bullets).concat(this.asteroids).concat([this.ship]);

	};

	Game.prototype.draw = function (ctx) {
		ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);
		this.consoleView.draw(ctx);
		this.leftEye.draw(ctx);
		this.rightEye.draw(ctx);
		this.allObjects().forEach(function (object) {
			object.draw(ctx);
		});
	};

	Game.prototype.moveObjects = function () {
		this.allObjects().forEach(function (object) {
			object.move();
		});
	};

	Game.prototype.randomPosition = function () {
		return [Game.DIM_X * Math.random(), Game.DIM_Y * Math.random()]
	};

	Game.prototype.wrap = function (pos) {
		if (pos[0] < 0) {
			pos[0] += Game.DIM_X;
		}
		if (pos[0] > Game.DIM_X) {
			pos[0] -= Game.DIM_X;
		}
		if (pos[1] < 0) {
			pos[1] += Game.DIM_Y;
		}
		if (pos[1] > Game.DIM_Y) {
			pos[1] -= Game.DIM_Y;
		}
	};

	Game.prototype.levelUp = function () {
		this.level += 1;
		this.ship.invincible = true;
		this.addAsteroids();
		this.levelSound.play();
		this.displayLevel();
	};

	Game.prototype.displayLevel = function () {
		var size = 400;
		var $display = $("#overlay-text");
		$display.html(this.level);
		var printText = function () {
			if (size > 0) {
				setTimeout(function () {
					$display.css({'font-size': size});
					$display.show();
					size -= 20;
					printText();
				}, 20);
			} else {
				$display.hide();
			}
		}

		printText();
	};


	Game.prototype.step = function () {
		this.moveObjects();
		this.checkCollisions();
		this.checkAsteroids();
	};

	Game.prototype.checkLives = function () {
		if (this.lives <= 0) {
			this.isOver = true;
			this.gameOver();
		}
	};

	Game.prototype.gameOver = function () {
		var string = 'Game Over';
		var index = 0;
		var $display = $("#overlay-text");
		$display.html('');
		$display.css({ 'font-size': 75 });
		var game = this;

		var printText = function (string) {
			if (index > string.length) {
				game.prompt();
			} else {
				setTimeout(function () {
					index++
					$display.html(string.slice(0, index));
					$display.show();
					if (index !== 5 && index !== 10) {
						game.jabSound.play();
					}
					printText(string);
				}, 300);
			}
		}

		printText(string);
	};

	Game.prototype.prompt = function () {
		$SCORE = this.score;
		Backbone.history.navigate('#gameover', {trigger: true});
	}

	Game.prototype.checkAsteroids = function () {
		if (this.asteroids.length === 0) { this.levelUp(); }
	};

	Game.prototype.addPlanet = function () {
		if (this.planets.length === 0) {
			this.planets.push(new Asteroids.Planet({ game: this }));
		}
	};

	Game.prototype.checkCollisions = function () {
		for (var i = 0; i < this.allObjects().length; i++) {
			for (var j = i + 1; j < this.allObjects().length; j++) {
				if (this.allObjects()[i].isCollidedWith(this.allObjects()[j])) {
					this.allObjects()[i].collideWith(this.allObjects()[j]);
				}
			}
		}
	};

	Game.prototype.remove = function (obj) {
		if (obj instanceof Asteroids.Asteroid) {
			var index;
			for (var i = 0; i < this.asteroids.length; i++) {
				if (this.asteroids[i] === obj) { index = i };
			}
			this.asteroids.splice(index, 1);
		}
		if (obj instanceof Asteroids.Bullet) {
			var index;
			for (var i = 0; i < this.bullets.length; i++) {
				if (this.bullets[i] === obj) { index = i };
			}
			this.bullets.splice(index, 1);
		}
		if (obj instanceof Asteroids.Planet) {
			this.planets.splice(0, 1);
		}
	};

	Game.prototype.isOutOfBounds = function (pos) {
		if (pos[0] < 0 || pos[0] > Game.DIM_X) {
			return true;
		}
		if (pos[1] < 0 || pos[1] > Game.DIM_Y) {
			return true;
		}
		return false;
	}
})();
